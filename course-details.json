[
    {
        "courseId": 1,
        "courseTitle": "Getting Started with PHP",
        "courseHeader": "Learn how PHP is used in modern web development to create dynamic web pages for visitors.",
        "courseDetails": "PHP started out as a small open source project that evolved as more and more people found out how useful it was. Rasmus Lerdorf unleashed the first version of PHP way back in 1994. PHP is a recursive acronym for 'PHP: Hypertext Preprocessor'. PHP is a server side scripting language that is embedded in HTML. It is used to manage dynamic content, databases, session tracking, even build entire e-commerce sites. It is integrated with a number of popular databases, including MySQL, PostgreSQL, Oracle, Sybase, Informix, and Microsoft SQL Server. PHP is pleasingly zippy in its execution, especially when compiled as an Apache module on the Unix side. The MySQL server, once started, executes even very complex queries with huge result sets in record-setting time. PHP supports a large number of major protocols such as POP3, IMAP, and LDAP. PHP4 added support for Java and distributed object architectures (COM and CORBA), making n-tier development a possibility for the first time. PHP is forgiving: PHP language tries to be as forgiving as possible. PHP Syntax is C-Like.PHP performs system functions, i.e. from files on a system it can create, open, read, write, and close them.PHP can handle forms, i.e. gather data from files, save data to a file, through email you can send data, return data to the user. You add, delete, modify elements within your database through PHP. Access cookies variables and set cookies. Using PHP, you can restrict users to access some pages of your website. It can encrypt data.",
        "courseImg": "https://i.ibb.co/TtRKPry/image.png"
    },
    {
        "courseId": 2,
        "courseTitle": "Learn PHP Variables",
        "courseHeader": "Learn about PHP variables and the string and number data types.",
        "courseDetails": "Variables in a program are used to store some values or data that can be used later in a program. The variables are also like containers that store character values, numeric values, memory addresses, and strings. PHP has its own way of declaring and storing variables. There are a few rules, that need to be followed and facts that need to be kept in mind while dealing with variables in PHP: Any variables declared in PHP must begin with a dollar sign ($), followed by the variable name. A variable can have long descriptive names (like $factorial, $even_nos) or short names (like $n or $f or $x) A variable name can only contain alphanumeric characters and underscores (i.e., ‘a-z’, ‘A-Z’, ‘0-9, and ‘_’) in their name. Even it cannot start with a number. A constant is used as a variable for a simple value that cannot be changed. It is also case-sensitive. Assignment of variables is done with the assignment operator, “equal to (=)”. The variable names are on the left of equal and the expression or values are to the right of the assignment operator ‘=’. One must keep in mind that variable names in PHP names must start with a letter or underscore and no numbers. PHP is a loosely typed language, and we do not require to declare the data types of variables, rather PHP assumes it automatically by analyzing the values. The same happens while conversion. No variables are declared before they are used. It automatically converts types from one type to another whenever required. PHP variables are case-sensitive, i.e., $sum and $SUM are treated differently.Data types used by PHP to declare or construct variables: <li>Integers,</li> <li>Doubles,</li> <li>NULL,</li> <li>Strings,</li> <li>Booleans,</li> <li>Arrays,</li> <li>Objects,</li> <li>Resources.</li> \n<strong>Local variables:</strong> The variables declared within a function are called local variables to that function and have their scope only in that particular function. In simple words, it cannot be accessed outside that function. Any declaration of a variable outside the function with the same name as that of the one within the function is a completely different variable. We will learn about functions in detail in later articles. For now, consider a function as a block of statements. \n<strong>Global variables:</strong> The variables declared outside a function are called global variables. These variables can be accessed directly outside a function. To get access within a function we need to use the “global” keyword before the variable to refer to the global variable.",
        "courseImg": "https://i.ibb.co/4TQH17k/image.png"
    },
    {
        "courseId": 3,
        "courseTitle": "Introduction to Functions in PHP",
        "courseHeader": "Get started learning about functions in PHP so you can create your own reusable blocks of code.",
        "courseDetails": "PHP functions are similar to other programming languages. A function is a piece of code which takes one more input in the form of parameter and does some processing and returns a value. \nYou already have seen many functions like fopen() and fread() etc. They are built-in functions but PHP gives you option to create your own functions as well.\nThere are two parts which should be clear to you −\n<li>Creating a PHP Function</li><li>Calling a PHP Function</li> \nIn fact you hardly need to create your own PHP function because there are already more than 1000 of built-in library functions created for different area and you just need to call them according to your requirement.\nPlease refer to PHP Function Reference for a complete set of useful functions.\nCreating PHP Function \nIts very easy to create your own PHP function. Suppose you want to create a PHP function which will simply write a simple message on your browser when you will call it. To creates a function called writeMessage() and then calls it just after creating it.\nNote that while creating a function its name should start with keyword function and all the PHP code should be put inside { and } braces. \n PHP <strong>Functions with Parameters</strong> \nPHP gives you option to pass your parameters inside a function. You can pass as many as parameters your like. These parameters work like variables inside your function. Following example takes two integer parameters and add them together and then print them. \n<strong>Passing Arguments by Reference</strong> \nIt is possible to pass arguments to functions by reference. This means that a reference to the variable is manipulated by the function rather than a copy of the variable's value. \nAny changes made to an argument in these cases will change the value of the original variable. You can pass an argument by reference by adding an ampersand to the variable name in either the function call or the function definition. \n<strong>PHP Functions returning value</strong> \nA function can return a value using the return statement in conjunction with a value or object. return stops the execution of the function and sends the value back to the calling code. \nYou can return more than one value from a function using return array(1,2,3,4). \nFollowing example takes two integer parameters and add them together and then returns their sum to the calling program. Note that return keyword is used to return a value from a function.",
        "courseImg": "https://i.ibb.co/DtG3mpP/image.png"
    },
    {
        "courseId": 4,
        "courseTitle": "PHP Built-in Functions",
        "courseHeader": "PHP contains built-in functions for completing common (and some niche) tasks. This course will teach you how to find and use functions.",
        "courseDetails": "The real power of PHP comes from its functions.\n\nPHP has more than 1000 built-in functions, and in addition you can create your own custom functions.\n\n<strong>PHP Built-in Functions</strong>\nPHP has over 1000 built-in functions that can be called directly, from within a script, to perform a specific task.\n\nPlease check out our PHP reference for a complete overview of the PHP built-in functions.\n\n<strong>PHP User Defined Functions</strong>\nBesides the built-in PHP functions, it is possible to create your own functions.\n\nA function is a block of statements that can be used repeatedly in a program.\nA function will not execute automatically when a page loads.\nA function will be executed by a call to the function.\n\n<strong>PHP Function Arguments</strong>\nInformation can be passed to functions through arguments. An argument is just like a variable.\n\nArguments are specified after the function name, inside the parentheses. You can add as many arguments as you want, just separate them with a comma.\n\n<strong>PHP is a Loosely Typed Language</strong>\nIn the example above, notice that we did not have to tell PHP which data type the variable is.\n\nPHP automatically associates a data type to the variable, depending on its value. Since the data types are not set in a strict sense, you can do things like adding a string to an integer without causing an error.\n\nIn PHP 7, type declarations were added. This gives us an option to specify the expected data type when declaring a function, and by adding the strict declaration, it will throw a 'Fatal Error' if the data type mismatches.\n\n<strong>PHP Return Type Declarations\nPHP 7 also supports Type Declarations for the return statement. Like with the type declaration for function arguments, by enabling the strict requirement, it will throw a 'Fatal Error' on a type mismatch.\n\nTo declare a type for the function return, add a colon ( : ) and the type right before the opening curly ( { )bracket when declaring the function.\n\n<strong>Passing Arguments by Reference</strong>\nIn PHP, arguments are usually passed by value, which means that a copy of the value is used in the function and the variable that was passed into the function cannot be changed.\n\nWhen a function argument is passed by reference, changes to the argument also change the variable that was passed in. To turn a function argument into a reference, the & operator is used.",
        "courseImg": "https://i.ibb.co/RhX69WF/image.png"
    },
    {
        "courseId": 5,
        "courseTitle": "Learn PHP Arrays",
        "courseHeader": "Learn about PHP ordered and associative arrays and how this data type is used to store, access and manipulate data.",
        "courseDetails": "An array is a special variable that we use to store or hold more than one value in a single variable without having to create more variables to store those values.\n\nTo create an array in PHP, we use the array function array( ).\n\nBy default, an array of any variable starts with the 0 index. So whenever you want to call the first value of an array you start with 0 then the next is 1...and so on.\n\n<strong>There are different types of arrays in PHP.</strong> They are:\n\nNumeric/Indexed Arrays\nAssociative Arrays\nMultidimensional Arrays\nLet's look at how each one works in more detail.\n\n<strong>What are Numerical or Indexed Arrays?</strong>\nA numerical array is a type of array which can store strings, numbers, and objects. Here's an example of a numeric array:\n\nFrom the code above I have a variable of  $cars which stores an array of 5 elements. The var_dump($cars) keyword above will show us the total number of elements we have in the array, the index number of each array, and also the length of each element in the array.\n\nYou can also chose to use the echo( ) keyword, but in my case I prefer to use var_dump( ) because it gives a more detailed explanation of the results we get.\n\nlocalhost_CODE_Arrays_arrays.php---Google-Chrome-6_15_2022-8_44_07-PM\nYou can also choose to display only one element/item of an array in the web browser by doing this:\n\nThe code above follows the same pattern as our definition of an array, which states that it counts from zero. We want to display the element with the index of 4. Counting from 0 to 4, we can see that 88 falls under index 4, indicating that 88 is the number we're seeking and that will be displayed to the browser.\n\n<strong>What are Associative Arrays?</strong>\nAn associative array is a type of array where the key has its own value. In an associative array, we make use of key and value.\n\nKeys are descriptive captions of the array element used to access the value of the array. And value is the value assigned to the array element.\n\nThere are situations where you shouldn't use the numeric/indexed array, such as:\n\nWhen you want to store the age of different students along with their names.\nWhen you want to record the salaries of your employees.\nWhen you want to store the score of a student in different subjects\nand so on.  \n\nSuppose we want to assign ages to a group of high school students with their names.\n\nWe can use the Associative array method to get it done. For example:\n\nThe code above is an example of an associative array. The keys of the array are scott_Mcall, Stalenski, Lydia, Allision, and we used them to assign the age to each student. The values of the array are 17, 18, 16, and 17.\n\nWhat are Multidimensional Arrays?\nYou can think of a multidimensional array as an array of arrays. This means that every element in the array holds a sub-array within it. In general, multidimensional arrays allow you to store multiple arrays in a single variable.\n\nSuppose we want to store the Names, Registration Numbers, and Emails of some of the staff working in a particular company. We can use multidimensional arrays to archive this.\n\nFor example:\n\nRemember, an array starts counting from index 0. The code above is an example of a multidimensional array because it contains more than one array (an array of arrays) with one single variable of $staff.\n\nThe echo $staff [2] [‘Email’] displays the email of the staff that falls into the index of 2. In our case it will display fcastle86@gmail.com.\n\nIf I want to access the Email of the staff in the first array, we'll do the following:\n\necho $staff [0] ['Email'];\n\nUsing the method above, you can access and display any information in the array from the code above.",
        "courseImg": "https://i.ibb.co/s3WFWV7/image.png"
    },
    {
        "courseId": 6,
        "courseTitle": "PHP Form Handling",
        "courseHeader": "Learn how to use PHP to handle HTML forms.",
        "courseDetails": "<strong>PHP Form Handling</strong>\nWe can create and use forms in PHP. To get form data, we need to use PHP superglobals $_GET and $_POST.\n\nThe form request may be get or post. To retrieve data from get request, we need to use $_GET, for post request $_POST.\n\n<strong>PHP Get Form</strong>\nGet request is the default form request. The data passed through get request is visible on the URL browser so it is not secured. You can send limited amount of data through get request.\n\n<strong>PHP Post Form</strong>\nPost request is widely used to submit form that have large amount of data such as file upload, image upload, login form, registration form etc.\n\nThe data passed through post request is not visible on the URL browser so it is secured. You can send large amount of data through post request.",
        "courseImg": "https://i.ibb.co/dQ4LHg1/image.png"
    },
    {
        "courseId": 7,
        "courseTitle": "Conditionals and Logic in PHP",
        "courseHeader": "Learn about the boolean data type, conditionals, switch statements, the ternary operator, comparison operators, and logical operators!",
        "courseDetails": "PHP Conditional Statements\nVery often when you write code, you want to perform different actions for different conditions. You can use conditional statements in your code to do this.\n\nIn PHP we have the following conditional statements:\n\n<li>if statement - executes some code if one condition is true</li>\n<li>if...else statement - executes some code if a condition is true and another code if that condition is false</li>\n<li>if...elseif...else statement - executes different codes for more than two conditions</li>\n<li>switch statement - selects one of many blocks of code to be executed</li>",
        "courseImg": "https://i.ibb.co/LRBHjnd/image.png"
    },
    {
        "courseId": 7,
        "courseTitle": "Loops in PHP",
        "courseHeader": "Loops are a key way to control execution of code. Learn how to use them effectively in PHP.",
        "courseDetails": "Like any other language, loop in PHP is used to execute a statement or a block of statements, multiple times until and unless a specific condition is met. This helps the user to save both time and effort of writing the same code multiple times.\n\nPHP supports four types of looping techniques;\n\n<li>for loop</li>\n<li>while loop</li>\n<li>do-while loop</li>\n<li>foreach loop</li>\n\nLet us now learn about each of the above mentioned loops in details:\n\n<strong>for loop:</strong> This type of loops is used when the user knows in advance, how many times the block needs to execute. That is, the number of iterations is known beforehand. These type of loops are also known as entry-controlled loops. There are three main parameters to the code, namely the initialization, the test condition and the counter.\n\nIn for loop, a loop variable is used to control the loop. First initialize this loop variable to some value, then check whether this variable is less than or greater than counter value. If statement is true, then loop body is executed and loop variable gets updated . Steps are repeated till exit condition comes.\n\nInitialization Expression: In this expression we have to initialize the loop counter to some value. for example: $num = 1;\nTest Expression: In this expression we have to test the condition. If the condition evaluates to true then we will execute the body of loop and go to update expression otherwise we will exit from the for loop. For example: $num <= 10;\nUpdate Expression: After executing loop body this expression increments/decrements the loop variable by some value. for example: $num += 2;\n\n<strong>while loop:</strong> The while loop is also an entry control loop like for loops i.e., it first checks the condition at the start of the loop and if its true then it enters the loop and executes the block of statements, and goes on executing it as long as the condition holds true.\n\n<strong>do-while loop:</strong> This is an exit control loop which means that it first enters the loop, executes the statements, and then checks the condition. Therefore, a statement is executed at least once on using the do…while loop. After executing once, the program is executed as long as the condition holds true.\n\n<strong>foreach loop:</strong> This loop is used to iterate over arrays. For every counter of loop, an array element is assigned and the next counter is shifted to the next element.",
        "courseImg": "https://i.ibb.co/56DqTkQ/image.png"
    },
    {
        "courseId": 9,
        "courseTitle": "PHP Form Validation",
        "courseHeader": "Learn how to use PHP to validate HTML forms.",
        "courseDetails": "<strong>Form Validation in PHP</strong>\nAn HTML form contains various input fields such as text box, checkbox, radio buttons, submit button, and checklist, etc. These input fields need to be validated, which ensures that the user has entered information in all the required fields and also validates that the information provided by the user is valid and correct.\n\nThere is no guarantee that the information provided by the user is always correct. PHP validates the data at the server-side, which is submitted by HTML form. You need to validate a few things:\n\n<li>Empty String</li>\n<li>Validate String</li>\n<li>Validate Numbers</li>\n<li>Validate Email</li>\n<li>Validate URL</li>\n<li>Input length</li>",
        "courseImg": "https://i.ibb.co/z5mFXmn/image.png"
    },
    {
        "courseId": 10,
        "courseTitle": "Classes and Objects in PHP",
        "courseHeader": "Learn how to use object-oriented programming in PHP.",
        "courseDetails": "<strong>Understanding Classes and Objects</strong>\nClasses and objects are the two main aspects of object-oriented programming. A class is a self-contained, independent collection of variables and functions which work together to perform one or more specific tasks, while objects are individual instances of a class.\n\nA class acts as a template or blueprint from which lots of individual objects can be created. When individual objects are created, they inherit the same generic properties and behaviors, although each object may have different values for certain properties.\n\nA class can be declared using the class keyword, followed by the name of the class and a pair of curly braces ({}).\n\n<strong>Using Constructors and Destructors</strong>\nTo make the object-oriented programming easier, PHP provides some magic methods that are executed automatically when certain actions occur within an object.\n\nFor example, the magic method __construct() (known as constructor) is executed automatically whenever a new object is created. Similarly, the magic method __destruct() (known as destructor) is executed automatically when the object is destroyed. A destructor function cleans up any resources allocated to an object once the object is destroyed.",
        "courseImg": "https://i.ibb.co/sK6T0H4/image.png"
    }
]